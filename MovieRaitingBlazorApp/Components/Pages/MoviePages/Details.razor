@page "/movies/details"
@inject MovieRaitingBlazorApp.Data.ApplicationDbContext DB
@using MovieRaitingBlazorApp.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movie.Title</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@movie.Description</dd>
            <dt class="col-sm-2">ReliseDate</dt>
            <dd class="col-sm-10">@movie.ReliseDate</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@movie.Rate</dd>
            <dt class="col-sm-2">Image</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(movie.ImageUrl))
                {
                    <img src="@movie.ImageUrl" alt="Movie Image" style="max-width: 100%;" />
                }
                else
                {
                    <p>No image available</p>
                }
            </dd>
        </dl>
        <div>

            <button @onclick="NavigateToEdit" class="btn btn-primary"><span class="bi bi-pencil" aria-hidden="true"></span>Edit</button>
            <button @onclick="NavigateToList" class="btn btn-primary"><span class="bi bi-list" aria-hidden="true"></span>Back to List</button>
            
        </div>
        <div>
            <h4>Add Rating</h4>
            <input type="number" @bind="newRating" min="1" max="10" step="1" />
            <button @onclick="AddRating">Add Rating</button>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color: red;">@errorMessage</p>
            }
        </div>
    }
</div>

@code {
    Movie? movie;
    double newRating;
    private string errorMessage = "";

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task AddRating()
    {
        if (newRating >= 1 && newRating <= 10)
        {
            movie.Rate = (movie.Rate + newRating) / 2;

            // Zapisz zmiany do bazy danych
            DB.Update(movie);
            await DB.SaveChangesAsync();

            // Zresetuj komunikat o błędzie
            errorMessage = "";
        }
        else
        {
            errorMessage = "Rating must be between 1 and 10.";
        }
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/movies");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/movies/edit?id={Id}");
    }
}
