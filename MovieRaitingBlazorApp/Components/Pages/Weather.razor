@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="WarmDaysFilter">Warm Day Filter</button>
    <button class="btn btn-primary" @onclick="ResetFilter">Reset Filter</button>
</div>

<div class="mb-3">
    <input class="form-control" @oninput="@Input" />
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecast ?? forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p role="status">Warm Dys count: @warmDays</p>

    <div>
        <iframe width="600" height="450" frameborder="0" style="border:0"
                src="https://www.openweathermap.org/weathermap?basemap=map&cities=false&layer=temperature&lat=52&lon=19&zoom=5">
        </iframe>
    </div>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? filteredForecast;
    private int warmDays;
    private string filterText = "";
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        foreach (var forecast in forecasts)
        {
            if (forecast.TemperatureC > 15)
            {
                warmDays++;
            }
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void WarmDaysFilter()
    {
        filteredForecast = forecasts?.Where(forecast => forecast.TemperatureC > 15).ToArray();
    }

    private void ResetFilter()
    {
        filteredForecast = null;
    }

    private void Input(ChangeEventArgs arg)
    {
        filterText = arg.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(filterText))
        {
            filteredForecast = null;
        }
        else
        {
            filteredForecast = forecasts?.Where(forecasts => forecasts.Summary?.Contains(filterText, StringComparison.OrdinalIgnoreCase) ?? false).ToArray();
        }
    }
}
